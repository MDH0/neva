import { fmt }

// https://www.99-bottles-of-beer.net

def Main(start) (stop) {
    // we use explicit lock to implement fan-in to printNext2Lines
    s Switch<int>, PrintNext2Lines, Lock<int>
    ---
    :start -> lock:sig
    99 -> lock:data
    [lock:data, s:else] -> printNext2Lines
    printNext2Lines -> s:data
    -1 -> s:case[0] -> :stop
}

def PrintNext2Lines(n int) (n int) {
    Dec<int>, PrintFirstLine, PrintSecondLine
    ---
    // printFirstLine and printSecondLine won't work in parallel
    // because they are in the loop at the level of Main
    :n -> printFirstLine:n
    printFirstLine:n -> dec:data
    dec:res -> printSecondLine:n
    printSecondLine:n -> :n 
}

// === First Line ===

const firstLine1 string = '$0 bottles of beer on the wall, $0 bottles of beer.\n'
const firstLine2 string = '1 bottle of beer on the wall, 1 bottle of beer.'
const firstLine3 string = 'No more bottles of beer on the wall, no more bottles of beer.'

def PrintFirstLine(n int) (n int) {
    s Switch<int>, p1 fmt.Println, p2 fmt.Println, Printf, Lock<int>, Panic
    ---
    :n -> [s:data, lock:data]

    0 -> s:case[0]
    1 -> s:case[1]
    s:case[0] -> { $firstLine3 -> p1:data }
    s:case[1] -> { $firstLine2 -> p2:data }
    
    s:else -> [
        printf:args[0],
        { $firstLine1 -> printf:tpl }
    ]

    [p1:sig, p2:sig, printf:sig] -> lock:sig
    printf:err -> panic
    lock:data -> :n
}

// === Second Line ===

const secondLine1 string = 'Take one down and pass it around, $0 bottles of beer on the wall.\n\n'
const secondLine2 string = 'Take one down and pass it around, 1 bottle of beer on the wall.\n'
const secondLine3 string = 'Take one down and pass it around, no more bottles of beer on the wall.\n'
const secondLine4 string = 'Go to the store and buy some more, 99 bottles of beer on the wall.'

def PrintSecondLine(n int) (n int) {
    Switch<int>, p1 fmt.Println, p2 fmt.Println, p3 fmt.Println, Printf, Lock<int>, Panic
    ---
    :n -> [switch:data, lock:data]

    -1 -> switch:case[0]
    0  -> switch:case[1]
    1  -> switch:case[2]

    switch:case[0] -> { $secondLine4 -> p1:data }
    switch:case[1] -> { $secondLine3 -> p2:data }
    switch:case[2] -> { $secondLine2 -> p3:data }

    switch:else -> [
        printf:args[0],
        { $secondLine1 -> printf:tpl }
    ]

    [p1:sig, p2:sig, p3:sig, printf:sig] -> lock:sig
    printf:err -> panic
    lock:data -> :n
}