// Code generated by MockGen. DO NOT EDIT.
// Source: desugarer.go

// Package desugarer is a generated GoMock package.
package desugarer

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sourcecode "github.com/nevalang/neva/internal/compiler/sourcecode"
	core "github.com/nevalang/neva/internal/compiler/sourcecode/core"
)

// MockScope is a mock of Scope interface.
type MockScope struct {
	ctrl     *gomock.Controller
	recorder *MockScopeMockRecorder
}

// MockScopeMockRecorder is the mock recorder for MockScope.
type MockScopeMockRecorder struct {
	mock *MockScope
}

// NewMockScope creates a new mock instance.
func NewMockScope(ctrl *gomock.Controller) *MockScope {
	mock := &MockScope{ctrl: ctrl}
	mock.recorder = &MockScopeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScope) EXPECT() *MockScopeMockRecorder {
	return m.recorder
}

// Entity mocks base method.
func (m *MockScope) Entity(ref core.EntityRef) (sourcecode.Entity, sourcecode.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Entity", ref)
	ret0, _ := ret[0].(sourcecode.Entity)
	ret1, _ := ret[1].(sourcecode.Location)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Entity indicates an expected call of Entity.
func (mr *MockScopeMockRecorder) Entity(ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Entity", reflect.TypeOf((*MockScope)(nil).Entity), ref)
}

// Location mocks base method.
func (m *MockScope) Location() *sourcecode.Location {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Location")
	ret0, _ := ret[0].(*sourcecode.Location)
	return ret0
}

// Location indicates an expected call of Location.
func (mr *MockScopeMockRecorder) Location() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Location", reflect.TypeOf((*MockScope)(nil).Location))
}

// Relocate mocks base method.
func (m *MockScope) Relocate(location sourcecode.Location) sourcecode.Scope {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Relocate", location)
	ret0, _ := ret[0].(sourcecode.Scope)
	return ret0
}

// Relocate indicates an expected call of Relocate.
func (mr *MockScopeMockRecorder) Relocate(location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Relocate", reflect.TypeOf((*MockScope)(nil).Relocate), location)
}
