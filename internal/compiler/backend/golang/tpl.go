package golang

import "github.com/nevalang/neva/internal/compiler/ir"

type templateData struct {
	CompilerVersion string
	ChanMap         map[ir.PortAddr]string
	FuncCalls       []ir.FuncCall
}

var mainGoTemplate = `// Code generated by Neva {{.CompilerVersion}}. DO NOT EDIT.
package main

import (
    "context"

    "github.com/nevalang/neva/internal/runtime"
    "github.com/nevalang/neva/internal/runtime/funcs"
)

func main() {
    // graceful shutdown for runtime
    ctx, cancel := context.WithCancel(context.Background())

    sigChan := make(chan os.Signal, 1)
    signal.Notify(sigChan, os.Interrupt, syscall.SIGTERM)

    go func() {
        <-sigChan
        cancel()
    }()

    // create channels for each port
    var (
        {{- range $addr, $chanName := .ChanMap}}
        {{$chanName}} = make(chan runtime.OrderedMsg)
        {{- end}}
    )

    // pick start and stop channels
    var (
        startPort = runtime.NewSingleOutport(
            {{getPortChanNameByAddr "in" "start"}},
            runtime.PortAddr{Path: "in", Port: "start"},
            nil,
        )
        stopPort := runtime.NewSingleInport(
            {{getPortChanNameByAddr "out" "stop"}},
            runtime.PortAddr{Path: "out", Port: "stop"},
            nil,
        )
    )
}
`
