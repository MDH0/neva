flow Doer() () {}

pub flow Doer() () {}

flow Doer() () {}

flow Doer<T>(x int) (y T) {}

flow Doer<T>(x int) (y T) {
}

flow Doer<T>(x int) (y T) {

}

flow Doer<T>(x int) (y T) {
}

flow Doer<T>(x int) (y T) {
    absNode INode
    ---
}

flow Doer<T>(x int) (y T) {
    absNode INode

    ---
}

flow Doer<T>(x int) (y T) {

    absNode INode

    ---
}

flow Doer<T>(x int) (y T) {
    simpleAbsNode INode
    absNodeWithTypeArgs INode<
        int,
        dict<
            string, vec<bool>
        >
    >
    ---
}

flow Doer<T>(x int) (y T) {
    concreteNode  Node
    ---
}

flow Doer<T>(x int) (y T) {
    concreteNode  Node
    ---
}

flow Doer<T>(x int) (y T) {
    concreteNodeWithTypeArgs  Node<int, vec<string>>
    ---
}

flow Doer<T>(x int) (y T) {
    concreteNodeWithDI1  Node1{foo Node2}
    concreteNodeWithDI2  Node1{
        foo Node2
        bar Node3
    }
    ---
}

flow Doer<T>(x int) (y T) {
    concreteNodeWithDI1  Node1{
        foo Node2
    }
    concreteNodeWithDI2  Node1{
        foo Node2
        bar Node3
    }
    ---
}

flow Doer<T>(x int) (y T) {
    concreteNodeWithDIAndTypeArgs  Node1<
        int,
        dict<
            string,
            vec<bool>
        >
    > {
        foo Node2
        bar Node3
    }
    ---
}

flow Doer<T>(x int) (y T) {
    simpleAbsNode INode

    absNodeWithTypeArgs INode<
        int,
        dict<
            string, vec<bool>
        >
    >

    concreteNodeWithDI1  Node1{ foo Node2 }

    concreteNodeWithDIAndTypeArgs  Node1<
        int,
        dict<
            string,
            vec<bool>
        >
    >{
        foo Node2
        bar Node3
    }
    ---
}

flow Main(start any) (stop any) {
    abs IReader
    concrete  Scanner
    ---
    :start -> abs:v
    abs:v -> [concrete:v]
    concrete:v -> :code
}

flow Main(start any) (stop any) {
    abs IReader
    concrete  Scanner
    ---
    
    :start -> abs:v
    abs:v -> [concrete:v]
    concrete:v -> :code
}

flow Main(start any) (stop any) {
    abs IReader
    concrete  Scanner

    ---
    :start -> abs:v
    abs:v -> [concrete:v]
    concrete:v -> :code
}

flow Main(start any) (stop any) {
    abs IReader
    concrete  Scanner

    ---

    :start -> abs:v
    abs:v -> [concrete:v]
    concrete:v -> :code
}

flow Main() () {
    $foo -> .bar -> foo:bar
    $foo -> .bar.baz -> foo:bar
    foo:bar -> .baz -> foo:bar
    foo:bar -> .baz.bax -> foo:bar
    $foo -> .bar.baz -> [foo:bar, bar:baz]
    foo:bar -> .baz.bax -> [
        foo:bar,
        bar:baz
    ]
}

flow Main() () {
    $foo -> (foo:bar -> bar:baz)

    $foo -> [(foo:bar -> bar:baz),
    (foo:bar -> bar:baz)
    ]

    $foo -> [(foo:bar -> bar:baz),
        (foo:bar -> bar:baz)
    ]

    $foo -> [
        (foo:bar -> bar:baz),
        (foo:bar -> bar:baz)]

    $foo -> [
        (foo:bar -> bar:baz),
        (foo:bar -> bar:baz)
    ]
}

flow Main() () {
    $a -> ($b -> ($c -> d:e))

    $a -> (
        $b -> ($c -> d:e)
    )

    $a -> (
        $b -> (
            $c -> d:e
        )
    )
}

flow Main(start) (stop) { :start -> :stop }

flow Main(start) (stop) {
    :start -> :stop }

flow Main(start) (stop) { :start -> :stop
}

flow Main(start) (stop) {
    :start -> :stop
}

flow Main() () {
    :foo -> :bar
    :baz -> :bax
}

// Test range expression
flow RangeTest1() () {
    1..10 -> :out
}

// Test multiple range expressions
flow RangeTest2() () {
    1..5 -> :out1
    10..20 -> :out2
}

// Test range expression with negative numbers
flow RangeTest3() () {
    -5..5 -> :out
}

// Test range expression mixed with other connections
flow RangeTest4() (out1 stream<int>, out2 any, out3 stream<int>) {
    1..10 -> :out1
    :in -> :out2
    20..30 -> :out3
}

// Test range expression with struct selectors
flow RangeTest5() (out stream<int>) {
    1..10.data -> :out
}

// Test range expression with array index
flow RangeTest6() (out stream<int>) {
    1..10 -> arr[0]
    arr[0] -> :out
}

// Test range expression with deferred connection
flow RangeTest7() (out stream<int>) {
    1..10 -> (process -> :out)
}

// Test range expression with multiple receivers
flow RangeTest8() (out1 stream<int>, out2 stream<int>) {
    1..10 -> [:out1, :out2]
}

// Test range expression inside deferred connection
flow RangeTest9() (out stream<int>) {
    :start -> (1..10 -> process -> :out)
}

// Test range expression inside fan-in
flow RangeTest10() (out stream<int>) {
    [
        1..5,
        6..10,
        11..15
    ] -> fanIn -> :out
}

// Test range expression with fan-out
flow RangeTest11() (out1 stream<int>, out2 stream<int>, out3 stream<int>) {
    1..30 -> [
        :out1,
        :out2,
        :out3
    ]
}

// Test complex scenario combining multiple features
flow RangeTest12() (out1 stream<int>, out2 stream<int>, out3 stream<int>) {
    [1..10, :input] -> fanIn -> [
        :out1,
        (process2 -> :out2),
        (21..30 -> process3 -> :out3)
    ]
}

// Test nested deferred connections with range expressions
flow RangeTest14() (out stream<int>) {
    :start -> (
        1..5 -> (
            6..10 -> (
                11..15 -> process
            )
        )
    )
}
