flow Main(start) (stop) {
	Range
    Map<int, string|int>{FizzBuzz}
    For{Println}
    Wait
    ---
    :start -> [(1 -> range:from), (101 -> range:to)]
    range -> map -> for -> wait -> :stop
}

flow FizzBuzz(data int) (res string|int) {
    Select<int, string|int>, Mod15, Mod3, Mod5

    ---

    :data -> [mod15, select:then[3]]

    mod15:then -> select:if[0]
    'FizzBuzz' -> select:then[0]
    mod15:else -> mod3
    
    mod3:then -> select:if[1]
    'Fizz' -> select:then[1]
    mod3:else -> mod5

    mod5:then -> select:if[2]
    'Buzz' -> select:then[2]
    mod5:else -> select:if[3]

    select -> :res
}

flow Mod15(num int) (then int, else int) {
    h ModHelper
    ---
    :num -> h:num
    15 -> h:den
    h:then -> :then
    h:else -> :else
}

flow Mod3(num int) (then int, else int) {
    h ModHelper
    ---
    :num -> h:num
    3 -> h:den
    h:then -> :then
    h:else -> :else
}

flow Mod5(num int) (then int, else int) {
    h ModHelper
    ---
    :num -> h:num
    5 -> h:den
    h:then -> :then
    h:else -> :else
}

// ModHelper checks if num can be devided by den
flow ModHelper(num int, den int) (then int, else int) {
    Mod
    Eq
    Cond<int>

    ---

    :num -> [mod:num, cond:data]
    :den -> mod:den

    mod:res -> eq:actual
    0 -> eq:compared
    eq -> cond:if

    cond:then -> :then
    cond:else -> :else
}
