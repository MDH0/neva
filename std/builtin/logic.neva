// Cond is a weaker version of Match that only works with booleans.
// Just like Match, it is used for mapping.
// If you need routing, use If instead.
#extern(cond)
pub flow Cond<T>(if bool, then T, else T) (res T)

#extern(match)
pub flow Match<T>(data T, [case] T, [then] T, else T) (res T)

// ---

#extern(eq)
pub flow Eq<T>(actual T, compared T) (res bool)

#extern(not)
pub flow Not(data bool) (res bool)

#extern(and)
pub flow And(a bool, b bool) (res bool)

#extern(or)
pub flow Or(a bool, b bool) (res bool)

#extern(int int_is_greater, float float_is_greater, string string_is_greater)
pub flow Gt<T int | float | string>(actual T, compared T) (res bool)

#extern(int int_is_lesser, float float_is_lesser, string string_is_lesser)
pub flow Lt<T int | float | string>(actual T, compared T) (res bool)
