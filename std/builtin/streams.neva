// basic stream operations

// Wait blocks until last stream item arrive, then sends signal.
pub flow Wait(data stream<any>) (sig) {
    If
    ---
    :data.last -> if
    if:then -> :sig
}

// Range sends sequence of integers starting and ending with given from and to.
// It supports negative ranges e.g. `-3, 0`. Integers are decremented in that case.
#extern(stream_int_range)
pub flow Range(from int, to int) (data stream<int>)

// ArrPortToStream iterates over all array-inport's slots in order
// and produces a stream of messages.
#extern(array_port_to_stream)
pub flow ArrPortToStream<T>([port] T) (data stream<T>)

// IPortReducer reduces a stream of messages to one single message.
// It's expected to send a result message after every processed stream.
pub interface IPortReducer<T>(data stream<T>) (res T)

// ReducePort reduces messages from multiple connections to a single message.
// It iterates over all array-inport's slots in order and streams every message
// to reducer. When all messages are processed the result is emited to outport.
pub flow ReducePort<T>([port] T) (res T) {
    reducer IPortReducer<T>
    streamer ArrPortToStream<T>
    ---
    :port => streamer:port
    streamer -> reducer -> :res
}

// === Iterators ===

// These constants are used for binding by Field flow.
const dataPath list<string> = ['data']
const lastPath list<string> = ['last']
const idxPath list<string> = ['idx']

// --- Map ---

// IMapHandler is a dependency for Map flow.
pub interface IMapHandler<T, Y>(data T) (res Y)

// Map maps one stream onto another.
// Just like ForEach, it does not block the stream. As soon as one item processed,
// it sends an item downstream and processes the next one.
// It's not recommented but possible to also produce side-effects.
// But, if all you need is side-effects, use ForEach instead.
pub flow Map<T, Y>(data stream<T>) (res stream<Y>) {
    fanOut FanOut<stream<T>>
    handler IMapHandler<T, Y>
    wrap Struct<stream<Y>>

    ---

    :data -> fanOut
    
    fanOut[0].idx -> wrap:idx
    fanOut[1].last -> wrap:last
    fanOut[2].data -> handler -> wrap:data

    wrap -> :res
}

// --- Filter ---

// IFilterHandler is a dependency for Filter component.
pub interface IFilterHandler<T>(data T) (res bool)

// Filter is for filtering items in a stream.
// It will produce a new stream with only items that passed the filter.
// It's possible to chain multiple Filters together.
pub flow Filter<T>(data stream<T>) (res stream<T>) {
    Cond<stream<T>>
    FanOut<stream<T>>
    handler IFilterHandler<T>

    ---

    :data -> fanOut
    
    fanOut[0] -> cond:data
    fanOut[1].data -> handler -> cond:if
    
    cond:then -> :res
}

// TODO: Some and Every

// --- Reduce ---

// IReduceHandler is a dependency for Reduce flow.
pub interface IReduceHandler<T, Y>(acc T, el T) (res Y)

// Reduce applies a reduction function to a stream of values, accumulating the result.
// It takes an initial value and a stream of data, and produces a single result.
pub flow Reduce<T, Y>(data stream<T>, init Y) (res Y) {
    handler IReduceHandler<T, Y>
    fanOut FanOut<stream<T>>
    acc Accumulator<Y>

    ---

    :init -> acc:init
    
    :data -> fanOut
    fanOut[0].data -> handler:el
    fanOut[1].last -> acc:last
    
    acc:cur -> handler:acc
    handler:res -> acc:upd

    acc:res -> :res
}

// IDEA:
// pub type AccumulatorUpdate<T> strcut {
//     data T
//     last bool
// }

// Accumulator maintains the current state of the reduction.
// It updates its value with each new input and outputs the final result when last is true.
#extern(accumulator)
pub flow Accumulator<T>(init T, upd T, last bool) (cur T, res T)

// --- ForEach ---

// IForEachHandler is a dependency for ForEach flow.
pub interface IForEachHandler<T>(data T) (sig any)

// ForEach processes stream to produce side-effects on its items.
// Just like Map, it does not block the stream. As soon as one item processed,
// it sends an item downstream and processes the next one.
// ForEach always sends the same stream, it's not intended for mapping.
// If you need mapping (or mapping with side-effects), use Map instead.
pub flow ForEach<T>(data stream<T>) (data stream<T>) {
    Lock<stream<T>>
    handler IForEachHandler<T>

    #bind(dataPath)
    getData Field<T>

    ---

    :data -> [getData, lock:data]
    getData -> handler -> lock:sig
    lock -> :data
}
