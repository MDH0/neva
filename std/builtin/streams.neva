// StreamPort iterates over all array-inport's slots in order
// and produces a stream of messages.
#extern(array_port_to_stream)
pub flow StreamPort<T>([port] T) (seq stream<T>)

// IPortReducer reduces a stream of messages to one single message.
// It's expected to send a result message after every processed stream.
pub interface IPortReducer<T>(seq stream<T>) (res T)

// ReducePort reduces messages from multiple connections to a single message.
// It iterates over all array-inport's slots in order and streams every message
// to reducer. When all messages are processed the result is emited to outport.
pub flow ReducePort<T>([port] T) (res T) {
    nodes { reducer IPortReducer<T>, streamer StreamPort<T> }
    :port => streamer:port
    streamer -> reducer -> :res
}

// === Iterators ===

// These constatns are used for binding by Field flow.
const dataPath list<string> = ['data']
const lastPath list<string> = ['last']
const idxPath list<string> = ['idx']

// --- For ---

// IForHandler is a dependency for For flow.
pub interface IForHandler<T>(data T) (sig any)

// For is for performing side-effect for every item in a stream.
// It will block untill all items are processed, so if you need to perform
// several side-effects, do them all in a single handler.
pub flow For<T>(item stream<T>) (sig any) {
    nodes {
        Lock<bool>
        handler IForHandler<T>

        #bind(lastPath)
        getLast Field<bool>

        #bind(dataPath)
        getData Field<T>

        Match<bool>
    }

    :item -> [getLast, getData]
    getLast -> lock:data
    getData -> handler

    handler -> lock:sig

    lock:data -> match:data
    true -> match:case[0] -> :sig
}

// --- Map ---

// IMapHandler is a dependency for Map flow.
pub interface IMapHandler<T, Y>(data T) (res Y)

// Map is for transforming every item in stream.
// Unlike For, it's not blocking and will produce a new stream,
// so it's possible to chain multiple Maps together.
// It's also possible to perform side-effect for every item,
// but if side-effect is all you need, consider using For instead.
pub flow Map<T, Y>(item stream<T>) (res stream<Y>) {
    nodes {
        wrap Struct<stream<Y>>
        handler IMapHandler<T, Y>

        #bind(lastPath)
        getLast Field<bool>

        #bind(dataPath)
        getData Field<T>

        #bind(idxPath)
        getIdx Field<int>
    }

    :item -> [getData, getLast, getIdx]

    getLast -> wrap:last
    getIdx -> wrap:idx
    getData -> handler -> wrap:data

    wrap -> :res
}

pub type ProductResult<T, R> struct {
    first T
    second R
} 

#extern(stream_product)
pub flow Product<T, R>(first stream<T>, second stream<R>) (seq stream<ProductResult<T, R>>)

pub type ZipResult<T, R> struct {
    first T
    second R
}

#extern(stream_zip)
pub flow Zip<T, R>(first stream<T>, second stream<R>) (seq stream<ZipResult<T, R>>)