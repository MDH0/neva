// If is a weaker version of Switch that only works with booleans.
// Just like Switch, it is used for routing.
// If you need mapping, use Ternary instead.
#extern(if)
pub def If(data bool) (then any, else any)

// Cond is an extended version of If
// that allows to route data based on a condition.
#extern(cond)
pub def Cond<T>(data T, if bool) (then T, else T)

// Switch is a more powerful version of `If` that handles multiple cases.
// Just like `If`, it is used for data routing.
// If you need mapping, use Match or Select instead.
#extern(switch)
pub def Switch<T>(data T, [case] T) ([case] T, else T)

// Lock allows to defer some event until some other event happens.
#extern(lock)
pub def Lock<T>(sig any, data T) (data T)

// FanOut is used to broadcast a message from one sender to multiple receivers.
// You should prefer multiple receivers sugar `-> [...]` instead.
// Multiple receivers is a syntax sugar over explicit FanOut.
#extern(fan_out)
pub def FanOut<T>(data T) ([data] T)

// FanIn merges several sources of data into single one.
// It makes sure order of incoming messages is respected.
#extern(fan_in)
pub def FanIn<T>([data] T) (res T)

// IDEA: there's another variation of Select/Switch
// (data T, [if] any) ([then] T, else T)
// it's like a mix between Switch and Select
// - it's like a switch, but it cares where data came from, not what data is
// - it's like a select, but it cares where to send data, not what to send

// MatchSwitch maps and routes the data.
// pub def MatchSwitch<T>(data T, [if] T, [then] T, else T) ([then] T, else T)
