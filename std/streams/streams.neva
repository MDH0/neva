// TODO
// pub flow Uncons<T>(data stream<T>) (head T, tail stream<T>)

pub type ProductResult<T, R> struct {
    first T
    second R
} 

// Product waits for each input stream to complete,
// then outputs stream of every combination of elements from the first stream with
// elements from the second.
#extern(stream_product)
pub flow Product<T, R>(first stream<T>, second stream<R>) (data stream<ProductResult<T, R>>)

pub type ZipResult<T, R> struct {
    first T
    second R
}

// Produces a stream of tuples of the form (first, second)
// where first is from the first stream and second is from the second stream.
// Stops when either stream is exhausted.
#extern(stream_zip)
pub flow Zip<T, R>(first stream<T>, second stream<R>) (data stream<ZipResult<T, R>>)